sessionInfo()
library(hapr)
library(hpar)
sessionInfo()
packageVersion("hpar")
table(hpaNormalTissue$Cell.type)
summary(hpaNormalTissue)
length(unique(hpaNormalTissue$Cell.type))
table(hpaNormalTissue$Expression.type)
(unique(hpaNormalTissue$Tissue))
head(unique(hpaNormalTissue$Tissue))
levels(hpaNormalTissue$Tissue))
levels(hpaNormalTissue$Tissue)
head(levels(hpaNormalTissue$Tissue))
head(levels(hpaNormalTissue$Cell.type))
names(hpaNormalTissue)
ls()
?getHpa
type
?getHpa
?getHpa
setHparOptions
?hpar
library(biomaRt)
vignette("biomaRt")
ensembl <- useMart("ensembl",dataset="hsapiens_gene_ensembl")
listFilters(ensembl)
listFilters(ensembl)[, 2]
listFilters(ensembl)[105, ]
listAttributes(ensembl)
options(width = 200)
listAttributes(ensembl)
listAttributes(ensembl)[24:30,]
listAttributes(ensembl)[24:30,1]
vignette("biomaRt")
getBM(attribuites = attrs, filters = filter, values = is, mart = ensembl)
getBM(attributes = attrs, filters = filter, values = is, mart = ensembl)
filter
attrs
id
attr
getBM(attributes = attr, filters = filt, values = id, mart = ensembl)
bm <- getBM(attributes = attr, filters = filt, values = id, mart = ensembl)
head(bm)
edit(bm)
library(RGtk2Extras)
gdf(bm)
1
gdf(bm)
gdf()
?gdf
gtable(bm)
library(RGtk2DfEdit)
install.packages("RGtk2DfEdit")
gedit(bm)
gedit
?gedit
dim(bm)
names(bm)
head(bm)
bm$namespace_1003
table(bm$namespace_1003)
bm[bm$namespace_1003 == "cellular_component",]
names(bm)
bm[bm$namespace_1003 == "cellular_component", "name_1006"]
bm[bm$namespace_1003 == "cellular_component", 1:3]
names(bm)
bm[bm$namespace_1003 == "cellular_component", 1:2]
names(bm)
bm
bm
listFilters(ensembl)
bm
bm
listFilters(ensembl)
library(rols)
vignette("rols")
library("Go.db")
library("GO.db")
openVignette()
0
options(width = 120)
openVignette()
1
openVignette()
1
library(org.Hs.eg.db)

cols(org.Hs.eg)
cols(org.Hs.eg.db)
head(keys(org.Hs.eg.db, keytype="UNIPROT"))

keytypes(org.Hs.eg.db)
select(org.Hs.eg.db, keys = id, cols = c("ENSEMBL", "GO", "ONTOLOGY"), keytype = "ENSEMBL")
ans <- select(org.Hs.eg.db, keys = id, cols = c("ENSEMBL", "GO", "ONTOLOGY"), keytype = "ENSEMBL")
ans[ans$ONTOLOGY == "CC", "GO"]
bm
?GO.db
vignette("rols")
xx <- ans[ans$ONTOLOGY == "CC", "GO"]
GOTERM[xx]
GOTERM[[xx]]
GOTERM[[xx[1]]]
GOTERM[xx]
apply(xx, GOTERM)
as.list(GOTERM[xx])
as.list(GOTERM[xx])
id
ans
sel
ans
data(hpaNormalTissue)
head(hpaNormalTissue)
data(hpaSubcellularLoc)
head(hpaSubcellularLoc)
data(hpaRna)
head(hpaRna)
dim(hpaRna)
dim(hpaSubcellularLoc)
dim(hpaNormalTissue)
getHpa(id)
getHpa(id, "Rna")
getHpa(id, "Nor")
getHpa(id, type = "det")
getHpa(id, what = "det")
getHpa(id)
GOTERM[ans]
ans
GOTERM[ans$GO[1]]
GOTERM[[ans$GO[1]]]
as.list(GOTERM[ans$GO]
as.list(GOTERM[ans$GO])
as.list(GOTERM[ans$GO])[[1]]
as.list(GOTERM[ans$GO])[[1]]["Term"]
as.list(GOTERM[ans$GO])[[1]]
class(as.list(GOTERM[ans$GO])[[1]])
slot(as.list(GOTERM[ans$GO])[[1]], "Term")
library(pRoloc)
showGOEvidenceCodes()
q("no")
